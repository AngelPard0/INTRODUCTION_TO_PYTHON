{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "INTRODUCTION TO PYTHON",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SdM-pkLTz3vQ"
      },
      "source": [
        "#**\"THE HISTORY OF PYTHON\"**\n",
        "![python](https://discoversdkcdn.azureedge.net/postscontent/python/python4.png)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AxZz5FjhK2xB"
      },
      "source": [
        "##***What is Python?***\n",
        "###Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.\n",
        "![python](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTeKZETtPE4pEjIPWMuc4LdKANmm_r5PaMZLA&usqp=CAU)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8aCTxNsWEO8U"
      },
      "source": [
        "##***Who created python?***\n",
        "### It was initially designed by Guido van Rossum in 1991 and developed by Python Software Foundation. It was mainly developed for emphasis on code readability, and its syntax allows programmers to express concepts in fewer lines of code.\n",
        "![python](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR5uIacMgC0J67zE4ihqRLWEdSra6UAi5AomQ&usqp=CAU)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q3IGDKiPM4qk"
      },
      "source": [
        "##***Python Version History***\n",
        "\n",
        "| Version release  | Date            | important features  |\n",
        "| :------------    | :-------------: | ---------:          |\n",
        "| Python 0.9.0     | February 1991   | Classes with inheritance exception handling|\n",
        "|                  |                 | Functions           | \n",
        "|                  |                 | Modules             |\n",
        "| |\n",
        "| Python 1.0       | January 1994    | Functional programming tools| \n",
        "| |                                  | Support for complex numbers|\n",
        "| |                                  | Functions with keyword arguments|\n",
        "| \n",
        "| Python 2.0       | October 2000    | List comprehension  |\n",
        "| Python 2.7.0 - EOL - Jan 2020      | July 2010           | Cycle-detecting garbage collector |\n",
        "|                  |                 | Support for Unicode |\n",
        "| | |Unification of data types and classes |\n",
        "| \n",
        "| Python 3         | December 2008   | Backward incompatible|\n",
        "| Python 3.6       | December 2016   | print keyword changed to print() function|\n",
        "| Python 3.6.5     | March 2018      | raw_input() function depreciated|\n",
        "|                  |                 | Unified str/Unicode types|\n",
        "|                  |                 | Utilities for automatic conversion of Pytthon 2.x code|\n",
        "|\n",
        "| Python 3.7.0     | May 2018        | New C API for thread-local storage|\n",
        "|                  |                 | Built-in breakpoint()|\n",
        "|                  |                 | Data classes         |  |                  |                 | Context variables    |  |\n",
        "| Python 3.8       | October 2019    | Assignment Expression|\n",
        "|                  |                 | Positional-only parameters|\n",
        "|                  |                 | Parallel filesystem cache for compiled bytecode files|\n",
        "| Python 3.9 - Current Version| October 2020| Dictionary Merge & Update Operators|\n",
        "|                 |                  | New removeprefix() and removesuffix() string methods|\n",
        "|                 |                  | Builtin Generic Types|\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V7KQ04ZigPlK"
      },
      "source": [
        "##***The most famous Python programs:***\n",
        "\n",
        "1. Pinterest\n",
        "\n",
        "2. Panda 3D\n",
        "\n",
        "3. Dropbox\n",
        "\n",
        "4. Spotify\n",
        "\n",
        "5. Netflix\n",
        "\n",
        "6. Uber\n",
        "\n",
        "7. Instagram\n",
        "\n",
        "8. Reddit\n",
        "\n",
        "9. Google\n",
        "\n",
        "10. Youtube"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-N3UT6SThKGx"
      },
      "source": [
        "## **Print Statement**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PrgRLuxYubSQ"
      },
      "source": [
        "####To print the \"hello, good morning\", use the Python print statement as follows:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9aLuenl2pib0",
        "outputId": "272c338a-2632-4193-9185-c1285e072f28"
      },
      "source": [
        "print(\"hello, good morning!\")"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello, good morning!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G9_FX8cJuetb"
      },
      "source": [
        "####To print blank lines, in addition to the above, add the number of spaces multiplied by \\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SJwYtdw1u0Ro",
        "outputId": "dfb27ab2-6d5c-4927-d806-129814127db2"
      },
      "source": [
        "print(\"hello\")\n",
        "print(2 * \"\\n\")\n",
        "print(\"good morning\")"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello\n",
            "\n",
            "\n",
            "\n",
            "good morning\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G0Pq8Vwlu03H"
      },
      "source": [
        "####When a variable is declared, a letter, word or number is used to which the user will assign whatever the user wants, then using print and enter () the variable would give the above result as"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pV-nDgeVu1iL",
        "outputId": "6935ccce-cb36-4c13-ac97-ab839c58e662"
      },
      "source": [
        "x=\"How are you?\"\n",
        "print(x)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "How are you?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x62s3HkZxjAS",
        "outputId": "b205e8a1-e00b-44bc-9623-eca73192d7d9"
      },
      "source": [
        "a=\"i'm fine\"\n",
        "print(f\"How are you? {a}\")"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "How are you? i'm fine\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BuyN_o8Oz2t7"
      },
      "source": [
        "####To solve operations nothing else is put print and enter () the operation or equation to perform"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ESXJFsXfz3V1",
        "outputId": "6318a1bb-88cb-4a52-8c99-cc7132929e84"
      },
      "source": [
        "print(\"if i have 10$ and my mom gives me 5$, how much money do i have?\")\n",
        "print(10 + 5,end='$')"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "if i have 10$ and my mom gives me 5$, how much money do i have?\n",
            "15$"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EoYsyZ7o2f6Y"
      },
      "source": [
        "####In this command we use words as \"input\" where it tells us that we must write an answer and the variable \"x\".format (variable \"y\") that helps us make a string variable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "isyheno-2gtn",
        "outputId": "0b516a57-7e52-48cb-c792-a4c65f3e9c02"
      },
      "source": [
        "Answer= input(\"How old are you?\")\n",
        "Message= \"{}, Oh! me too.\"\n",
        "print(Message.format(Answer))"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "How old are you?18\n",
            "18, Oh! me too.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uftpo1WkpZ8Q"
      },
      "source": [
        "##**if-else statement**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ReaYF5O_t3V"
      },
      "source": [
        "####**Python if Statement Flowchart**\n",
        "![python](https://cdn.programiz.com/sites/tutorial2program/files/Python_if_statement.jpg)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3bQ8KZFBpg6E",
        "outputId": "4699df70-75ea-4dae-f98e-7c29b8baff86"
      },
      "source": [
        "# If the number is positive, we print an appropriate message\n",
        "\n",
        "num = 3\n",
        "if num > 0:\n",
        "    print(num, \"is a positive number.\")\n",
        "print(\"This is always printed.\")\n",
        "\n",
        "num = -1\n",
        "if num > 0:\n",
        "    print(num, \"is a positive number.\")\n",
        "print(\"This is also always printed.\")"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 is a positive number.\n",
            "This is always printed.\n",
            "This is also always printed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ayeVPE3-ADPv"
      },
      "source": [
        "####In the above example, num > 0 is the test expression.\n",
        "\n",
        "####The body of if is executed only if this evaluates to True.\n",
        "\n",
        "####When the variable num is equal to 3, test expression is true and statements inside the body of if are executed.\n",
        "\n",
        "####If the variable num is equal to -1, test expression is false and statements inside the body of if are skipped.\n",
        "\n",
        "####The print() statement falls outside of the if block (unindented). Hence, it is executed regardless of the test expression."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibAVkg1yAgr1"
      },
      "source": [
        "###**Python if..else Flowchart**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kFEQtgZgAv5f"
      },
      "source": [
        "![python](https://cdn.programiz.com/sites/tutorial2program/files/Python_if_else_statement.jpg)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pgdkbdYDACkF",
        "outputId": "27690cd8-9e24-4801-afdc-fe3bc7190a50"
      },
      "source": [
        "num = 5\n",
        "\n",
        "# num = -5\n",
        "# num = 0\n",
        "\n",
        "if num >= 0:\n",
        "    print(\"Positive or Zero\")\n",
        "else:\n",
        "    print(\"Negative number\")"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Negative number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FkeS-F2DBYuv"
      },
      "source": [
        "####In the above example, when num is equal to 5, the test expression is true and the body of if is executed and the body of else is skipped.\n",
        "\n",
        "####If num is equal to -5, the test expression is false and the body of else is executed and the body of if is skipped.\n",
        "\n",
        "####f num is equal to 0, the test expression is true and body of if is executed and body of else is skipped."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6JCmZqsYpjqT"
      },
      "source": [
        " ## **loops**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZvRGTH4MCfR6"
      },
      "source": [
        "####A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n",
        "\n",
        "####This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.\n",
        "\n",
        "####With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DylQbC42pt_j",
        "outputId": "e00eee6e-10ec-426f-9353-3b27e7ec0ac7"
      },
      "source": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for x in fruits:\n",
        "  print(x)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple\n",
            "banana\n",
            "cherry\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uacu0rtlCqFP"
      },
      "source": [
        "####Even strings are iterable objects, they contain a sequence of characters:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CAgicOzVC26H",
        "outputId": "a048196e-47da-464c-9f4d-7794eb592224"
      },
      "source": [
        "for x in \"banana\":\n",
        "  print(x)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b\n",
            "a\n",
            "n\n",
            "a\n",
            "n\n",
            "a\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "01zPfbPQC1_t"
      },
      "source": [
        "####With the break statement we can stop the loop before it has looped through all the items:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lTvBrkpnDEk8",
        "outputId": "522a7ad3-8bae-4ad7-f302-aa9e3206dfdd"
      },
      "source": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for x in fruits:\n",
        "  print(x)\n",
        "  if x == \"banana\":\n",
        "    break"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple\n",
            "banana\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DXCwlGJiDUSd",
        "outputId": "9237a8aa-4d1e-4d0a-867b-ae2d2c6cd67b"
      },
      "source": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for x in fruits:\n",
        "  if x == \"banana\":\n",
        "    break\n",
        "  print(x)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmY1pJ_1DbLi"
      },
      "source": [
        "####With the continue statement we can stop the current iteration of the loop, and continue with the next:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OfKK3sLcDhy5",
        "outputId": "406a6991-5f9d-4ef7-ca8e-6836f9048e48"
      },
      "source": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for x in fruits:\n",
        "  if x == \"banana\":\n",
        "    continue\n",
        "  print(x)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple\n",
            "cherry\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bfMGXlIzDpeR"
      },
      "source": [
        "####To loop through a set of code a specified number of times, we can use the range() function,\n",
        "####The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kqtzD5anDxT8",
        "outputId": "15139720-8b84-4696-c0a6-d6569c777f6a"
      },
      "source": [
        "for x in range(6):\n",
        "  print(x)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mE30IRZ3EI0d"
      },
      "source": [
        "####The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JRxZJAgKD9NV",
        "outputId": "13ef9c54-d156-4411-a507-cf545acd90b2"
      },
      "source": [
        "for x in range(2, 6):\n",
        "  print(x)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KC6ep7nQEMbm"
      },
      "source": [
        "####The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-X8tWOJiD_ne",
        "outputId": "50a09d3f-7a06-4c72-cd6b-e09e8e2f0275"
      },
      "source": [
        "for x in range(2, 30, 3):\n",
        "  print(x)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "5\n",
            "8\n",
            "11\n",
            "14\n",
            "17\n",
            "20\n",
            "23\n",
            "26\n",
            "29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9i2mHDC4Eezd"
      },
      "source": [
        "####A nested loop is a loop inside a loop.\n",
        "\n",
        "####The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JuwsoQRwEkf-"
      },
      "source": [
        "adj = [\"red\", \"big\", \"tasty\"]\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "\n",
        "for x in adj:\n",
        "  for y in fruits:\n",
        "    print(x, y)"
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n42XfcUxEidi"
      },
      "source": [
        "***References:***\n",
        "\n",
        "https://www.python.org/doc/essays/blurb/\n",
        "https://www.geeksforgeeks.org/history-of-python/\n",
        "https://www.tutorialsteacher.com/python/python-version-history\n",
        "https://educacionprofesional.ing.uc.cl/10-programas-en-python-que-serian-estas-grandes-marcas-sin-este-lenguaje-de-programacion/\n",
        "https://www.geeksforgeeks.org/history-of-python/\n"
      ]
    }
  ]
}
